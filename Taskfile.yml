version: 3

env:
  TAG_NAME:
    sh: |
      # check if the current branch is main
      if [ "$(git rev-parse --abbrev-ref HEAD)" = "main" ]; then
          # if the current branch is main, then use the version as is
          cat .version
      else
          # if the current branch is not main, then append the branch hash to the version
          cat .version | git rev-parse --short HEAD
      fi

tasks:
  dev-setup:
    desc: "Setup development environment"
    cmds:
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.52.2
      - go install github.com/nikolaydubina/go-cover-treemap@latest

  deps:
    desc: "Dependencies Check"
    cmds:
      - go mod download
      - go mod tidy
      - go mod verify
      - go mod vendor

  fmt:
    desc: "Format Check"
    cmds:
      - goimports -w -e $(find . -type f -name '*.go' -not -path "*/vendor/*")

  lint:
    desc: "Lint Check"
    cmds:
      - golangci-lint run --fix
      - go vet ./...

  gen:
    cmds:
      - go generate ./...
    desc: Run go generate on the project

  test:
    desc: "Running unit Tests"
    cmds:
      - go test -coverprofile cover.out ./...
      - go tool cover -html=cover.out -o cover.html
      - go-cover-treemap -coverprofile cover.out > assets/cover-treemap.svg

  tag:
    desc: "Tagging the release"
    cmds:
      - git tag -a {{.TAG_NAME}} -m "Release {{.TAG_NAME}}"
      - git push origin {{.TAG_NAME}}

  pr-check:
    desc: "PR Check"
    cmds:
      - task deps
      - task fmt
      - task lint
      - task test