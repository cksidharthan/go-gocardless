// Code generated by MockGen. DO NOT EDIT.
// Source: http-client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIClient) Delete(path string, params map[string]string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path, params, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIClientMockRecorder) Delete(path, params, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIClient)(nil).Delete), path, params, response)
}

// Get mocks base method.
func (m *MockIClient) Get(path string, params map[string]string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path, params, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIClientMockRecorder) Get(path, params, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIClient)(nil).Get), path, params, response)
}

// Post mocks base method.
func (m *MockIClient) Post(path string, params map[string]string, body []byte, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", path, params, body, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockIClientMockRecorder) Post(path, params, body, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIClient)(nil).Post), path, params, body, response)
}

// Put mocks base method.
func (m *MockIClient) Put(path string, params map[string]string, body []byte, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", path, params, body, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIClientMockRecorder) Put(path, params, body, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIClient)(nil).Put), path, params, body, response)
}
